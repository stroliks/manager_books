from Business_Logic_Upper import *
from Business_Logic_Lower import *


# Сообщение прветствия при запуске и завершении программы
def greeting():
    print("Добро пожаловать в приложение по управлению каталогом книг!")
    print()

def goodbye():
    print("Хорошего дня! Ждем Вас снова!")

# Вывод сообщения о  выборе первоначального действия с каталогом
def message_first_select():
    print("Пожалуйста, с помощью ввода начальных букв выберете желаемое действие: \n"
          "С - Создать каталог\n"
          "У - Удалить каталог\n"
          "П - Просмотр истории каталогов \n"
          "Р - Работа с каталогом (добавление/удаление книг, просмотр информации о книгах, экспорт каталога) \n"
          "В - Выход из приложения")
    print()
    first_select_action = input("Введите первую букву желаемого действия:     ")
    return first_select_action

# ФУНКЦИИ ВЫВОДА СООБЩЕНИЙ ПРИ СОЗДАНИИ КАТАЛОГА
#___________________________________________________________________________________________________________________
# Вывод сообщения при создании каталога
def message_create_catalog():
       name_catalog = input("Введите название каталога:   ")
       return name_catalog

# Вывод сообщения при уже существующем каталоге либо при успешном создании:
def message_result_create_catalog(value, name_catalog):
    if value == True:
        print ("Создание нового каталога невозможно! Каталог уже существует!!!")
        print()
    else:
        print(f"Каталог под названием <<{name_catalog}>> успешно создан!")
        print()


# ФУНКЦИИ ВЫВОДА СООБЩЕНИЙ ПРИ УДАЛЕНИИ КАТАЛОГА
#____________________________________________________________________________________________________________________
# Вывод сообщения при удалении каталога (подтверждение удаления)
def message_confirm_delete_catalog():
    confirm_delete_catalog = input("каталог будет полностью удален, останется лишь статистическая информация.\n"
                                   "Вы точно хотите удалить каталог?? (Да или Нет) :    ")
    return confirm_delete_catalog

# Вывод сообщения результатов удалении каталога
def message_result_delete_catalog(result_delete):
    if result_delete == True:
        print("Каталог успешно удален!!!")
        print()
    else:
        print("Текущий рабочий каталог отсутствует. Нечего удалять")
        print()



# ФУНКЦИИ ВЫВОДА СООБЩЕНИЙ при просмотре истории каталогов
#_____________________________________________________________________________________________________________________
# Вывод сообщения при просмотре истории каталогов
def message_catalogs_history(list_catalog):
    print(f"За время функционирования программы было создано {len(list_catalog)}  каталогов (включая текущий):  ")
    print()
    for i in range(len(list_catalog)):
        print(f"{i+1}. Каталог с именем {list_catalog[i]}, на момент удаления содержал {i} книг")
        print()

#_______________________________________________________________________________________________________________________
# Вывод сообщения при работе с каталогом
def msg_select_act_in_catalog():
    print("Пожалуйста, с помощью ввода начальных букв выберете желаемое действие со списком книг: \n"
          "Д - Добавить книгу в каталог\n"
          "У - Удалить книгу из каталога\n"
          "О - Отобразить все книги каталога \n"
          "П - Поиск книги в каталоге \n"
          "С - Сортировка книг в каталоге \n"
          "Э - Экспорт списка книг из каталога \n"
          "Н - Назад в главное меню")
    print()
    select_act_in_catalog = input("Введите первую букву желаемого действия:     ")
    return select_act_in_catalog


# Вывод сообщения при добавлении книги... ПОДУМАТЬ О CОЗДАНИИ ВЫПАДАЮЩЕГО СПИСКА ПРИ ВЫБОРЕ ЖАНРА
def message_add_book():
       name_book = input("Введите название книги:   ")
       author_book = input("Введите автора книги:   ")
       year_book = input("Введите год издания книги:   ")
       genre_book = input("Введите жанр книги:   ")
       return name_book, author_book, year_book, genre_book


# Вывод сообщения при отображении книг в каталоге
def view_list_books(file):
    catalog = []
    file = open(file, "r")
    catalog = file.readlines()
    for i, line in enumerate(catalog, start = 1):
        print(f"{i}.{line}")
        print()

# Вывод сообщения при выборе  книги для удаления
def message_delete_book():
    number_delete_book = input(f"Введите порядковый номер книги, которую Вы хотите удалить:     ")
    return number_delete_book


# Вывод сообщения при выборе поиска книги
def message_search_books():
    search_word = input(f"Введите букву либо часть слова названия книги или ее автора, которую Вы хотите найти:     ")
    return search_word

# Функция вывода списка
def print_list(lst):
    for line in lst:
        print(line)
        print()

# Вывод сообщения при выборе сортировки списка книг
def message_sort_books():
    print("По выбранному атрибуту список книг будет отсортирован в порядке возрастания.\n"
          "Перечень атрибутов сортировки:     \n"
        "Н - Название книги\n"
        "А - Автор книги\n"
        "Г - Год издания книги \n"
        "Ж - Жанр книги")
    print()
    sort_atribute = input(f"По выбранному атрибуту список книг будет отсортирован в порядке возрастания.\n"
                          f"Введите первую букву атрибута сортировки списка: ")
    return sort_atribute

# Вывод сообщения при выборе экспорта каталога
def message_export_catalog():
    print("Выберите формат экспорта каталога:     \n"
        "C - CSV   \n"
        "T - TXT   \n")
    print()
    export_format = input("Введите первую букву форматf экспорта каталога:   ")
    return export_format